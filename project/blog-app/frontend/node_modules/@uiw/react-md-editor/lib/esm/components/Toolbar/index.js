import _objectSpread from "@babel/runtime/helpers/esm/objectSpread2";
import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React, { Component } from 'react';
import classnames from 'classnames';
import "./index.css";

var Toolbar = /*#__PURE__*/function (_Component) {
  _inherits(Toolbar, _Component);

  var _super = _createSuper(Toolbar);

  function Toolbar() {
    var _this;

    _classCallCheck(this, Toolbar);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _this.handleClick = function (command) {
      var onCommand = _this.props.onCommand;
      onCommand && onCommand(command);
    };

    return _this;
  }

  _createClass(Toolbar, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          prefixCls = _this$props.prefixCls,
          commands = _this$props.commands,
          active = _this$props.active;
      return /*#__PURE__*/React.createElement("div", {
        className: "".concat(prefixCls, "-toolbar")
      }, /*#__PURE__*/React.createElement("ul", null, commands.map(function (item, idx) {
        if (item.keyCommand === 'divider') {
          return /*#__PURE__*/React.createElement("li", _extends({
            key: idx
          }, item.liProps, {
            className: "".concat(prefixCls, "-toolbar-divider")
          }));
        }

        var activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]);
        return /*#__PURE__*/React.createElement("li", _extends({
          key: idx
        }, item.liProps, {
          className: classnames({
            active: activeBtn
          })
        }), !item.buttonProps && item.icon, item.buttonProps && React.createElement('button', _objectSpread(_objectSpread({
          type: 'button',
          disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),
          "data-name": item.name
        }, item.buttonProps), {}, {
          onClick: _this2.handleClick.bind(_this2, item)
        }), item.icon));
      })));
    }
  }]);

  return Toolbar;
}(Component);

Toolbar.defaultProps = {
  commands: []
};
export { Toolbar as default }; 
//# sourceMappingURL=index.js.map