{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport React, { Component } from 'react';\nimport classnames from 'classnames';\nimport \"./index.css\";\n\nvar Toolbar = /*#__PURE__*/function (_Component) {\n  _inherits(Toolbar, _Component);\n\n  var _super = _createSuper(Toolbar);\n\n  function Toolbar() {\n    var _this;\n\n    _classCallCheck(this, Toolbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.handleClick = function (command) {\n      var onCommand = _this.props.onCommand;\n      onCommand && onCommand(command);\n    };\n\n    return _this;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          prefixCls = _this$props.prefixCls,\n          commands = _this$props.commands,\n          active = _this$props.active;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(prefixCls, \"-toolbar\")\n      }, /*#__PURE__*/React.createElement(\"ul\", null, commands.map(function (item, idx) {\n        if (item.keyCommand === 'divider') {\n          return /*#__PURE__*/React.createElement(\"li\", _extends({\n            key: idx\n          }, item.liProps, {\n            className: \"\".concat(prefixCls, \"-toolbar-divider\")\n          }));\n        }\n\n        var activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]);\n        return /*#__PURE__*/React.createElement(\"li\", _extends({\n          key: idx\n        }, item.liProps, {\n          className: classnames({\n            active: activeBtn\n          })\n        }), !item.buttonProps && item.icon, item.buttonProps && React.createElement('button', _objectSpread(_objectSpread({\n          type: 'button',\n          disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),\n          \"data-name\": item.name\n        }, item.buttonProps), {}, {\n          onClick: _this2.handleClick.bind(_this2, item)\n        }), item.icon));\n      })));\n    }\n  }]);\n\n  return Toolbar;\n}(Component);\n\nToolbar.defaultProps = {\n  commands: []\n};\nexport { Toolbar as default };","map":{"version":3,"sources":["../../../../src/components/Toolbar/index.tsx"],"names":["Toolbar","Component","defaultProps","commands","handleClick","onCommand","prefixCls","active","item","idx","activeBtn","classnames","type","disabled","name","onClick"],"mappings":";;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,QAAA,OAAA;AACA,OAAA,UAAA,MAAA,YAAA;AAGA,OAAA,aAAA;;IAUqBA,O;;;;;;;;;;;;;;;;UAInBI,W,GAAc,UAAA,OAAA,EAAuB;AAAA,UAC3BC,SAD2B,GACb,KAAA,CADa,KACb,CADa,SAAA;AAEnCA,MAAAA,SAAS,IAAIA,SAAS,CAAtBA,OAAsB,CAAtBA;;;;;;;;6BAEO;AAAA,UAAA,MAAA,GAAA,IAAA;;AAAA,UAAA,WAAA,GACiC,KADjC,KAAA;AAAA,UACCC,SADD,GAAA,WAAA,CAAA,SAAA;AAAA,UACYH,QADZ,GAAA,WAAA,CAAA,QAAA;AAAA,UACsBI,MADtB,GAAA,WAAA,CAAA,MAAA;AAEP,aAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,UAAA;AAAd,OAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACG,QAAQ,CAAR,GAAA,CAAa,UAAA,IAAA,EAAA,GAAA,EAAe;AAC3B,YAAIC,IAAI,CAAJA,UAAAA,KAAJ,SAAA,EAAmC;AACjC,iBAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAI,YAAA,GAAG,EAAEC;AAAT,WAAA,EAAkBD,IAAI,CAAtB,OAAA,EAAA;AAAgC,YAAA,SAAS,EAAA,GAAA,MAAA,CAAA,SAAA,EAAA,kBAAA;AAAzC,WAAA,CAAA,CAAP;AACD;;AACD,YAAME,SAAS,GAAGH,MAAM,KAAKC,IAAI,CAAJA,KAAAA,GAAaD,MAAM,CAACC,IAAI,CAAXD,UAAM,CAANA,IAA2BA,MAAM,CAACC,IAAI,CAAXD,UAAM,CAANA,KAA4BC,IAAI,CAAxEA,KAAAA,GAAiFD,MAAM,CAACC,IAAI,CAAzH,UAAoH,CAA5F,CAAxB;AACA,eAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AAAI,UAAA,GAAG,EAAEC;AAAT,SAAA,EAAkBD,IAAI,CAAtB,OAAA,EAAA;AAAgC,UAAA,SAAS,EAAEG,UAAU,CAAC;AAAEJ,YAAAA,MAAM,EAAEG;AAAV,WAAD;AAArD,SAAA,CAAA,EACG,CAACF,IAAI,CAAL,WAAA,IAAqBA,IAAI,CAD5B,IAAA,EAEGA,IAAI,CAAJA,WAAAA,IAAoB,KAAK,CAAL,aAAA,CAAA,QAAA,EAAA,aAAA,CAAA,aAAA,CAAA;AACnBI,UAAAA,IAAI,EADe,QAAA;AAEnBC,UAAAA,QAAQ,EAAEN,MAAM,IAAIA,MAAM,CAAhBA,OAAAA,IAA4BA,MAAM,CAANA,OAAAA,KAA5BA,SAAAA,IAA4D,CAAC,uBAAA,IAAA,CAA4BC,IAAI,CAFpF,UAEoD,CAFpD;AAGnB,uBAAaA,IAAI,CAACM;AAHC,SAAA,EAGQN,IAAI,CAHZ,WAAA,CAAA,EAAA,EAAA,EAAA;AAInBO,UAAAA,OAAO,EAAE,MAAI,CAAJ,WAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA;AAJU,SAAA,CAAA,EAKlBP,IAAI,CARX,IAGyB,CAFvB,CADF;AARR,OAGO,CADH,CADF,CADF;AAuBD;;;;EAjCkCP,S;;AAAhBD,O,CACLE,YADKF,GACyB;AAC1CG,EAAAA,QAAQ,EAAE;AADgC,CADzBH;SAAAA,O","sourcesContent":["import React, { Component } from 'react';\nimport classnames from 'classnames';\nimport { IProps } from '../../utils';\nimport { ICommand } from '../../commands';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  onCommand?: (command: ICommand) => void;\n  commands: ICommand[];\n  active?: {\n    [key: string]: any,\n  },\n}\n\nexport default class Toolbar extends Component<IToolbarProps> {\n  public static defaultProps: IToolbarProps = {\n    commands: [],\n  }\n  handleClick = (command: ICommand) => {\n    const { onCommand } = this.props;\n    onCommand && onCommand(command);\n  }\n  render() {\n    const { prefixCls, commands, active } = this.props;\n    return (\n      <div className={`${prefixCls}-toolbar`}>\n        <ul>\n          {commands.map((item, idx) => {\n            if (item.keyCommand === 'divider') {\n              return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />\n            }\n            const activeBtn = active && (item.value ? active[item.keyCommand] && active[item.keyCommand] === item.value : active[item.keyCommand]); \n            return (\n              <li key={idx} {...item.liProps} className={classnames({ active: activeBtn })}>\n                {!item.buttonProps && item.icon}\n                {item.buttonProps && React.createElement('button', {\n                  type: 'button',\n                  disabled: active && active.preview && active.preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand),\n                  \"data-name\": item.name, ...item.buttonProps,\n                  onClick: this.handleClick.bind(this, item)\n                }, item.icon)}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}